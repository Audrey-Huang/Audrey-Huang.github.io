---
layout:     post
title:      "New features of ES6"
subtitle:   "ES6新特性"
date:       2021-03-21
author:     "Audrey"
header-img: "img/post-js-es6-2021.jpg"
catalog: true
tags:
    - Web前端
    - JS
---
### ES6新特性总结

#### 1.let，const块级作用域和var的区别

var声明范围是函数作用域

```javascript
function test(){
    var a=100;
    console.log(a);
}
test()//100
console.log(a)//报错
```

```js
if(true){
    var a=100;
    console.log(a);//100
}
console.log(a);//100
```

var声明提升

```javascript
function test(){
    console.log(a);
    var a=100;
    /*
        以上代码相当于
        var a;
        console.log(a);
        a=100;        
    */
}
test();//undefined
```

var声明

```javascript
var age;
var age;//不会报错
```

let声明的范围是块作用域

```javascript
if(true){
    let b=100;
    console.log(b)//100
}
console.log(b)//报错
```

let声明

```js
let b;
let b;//报错
```

let作用域不会提升

```js
console.log(b);//报错
let b=100;
```

#### const

基本和let一致，只是声明变量时不能够修改变量的值，但是若是引用一个对象，则可以修改对象内部属性。

#### 2.解构—快速提取数组/对象中的元素：数组解构，对象解构

```js
const arr=[1,2,3];
const [a,b,c]=arr;
console.log(a,b,c);
```

#### 3.模板字符串：``

用来换行和插值

```js
const str = `fdsjak
fdsa`
console.log(str)

// 插值
const strs = `random: ${Math.random()}`;
console.log(strs)
```

字符串处理以及返回值为标签函数的返回值

```js
const [str1, str2, str3] = strs;
const genderParsed = gender == "1" ? "男" : "女";
// 可以在此做过滤，字符串处理，多语言等操作
return str1 + name + str2 + str3 + genderParsed;
// 返回值为标签函数的返回值
const result = tagFunc`my name is ${person.name}.gender is ${person.gender}`;
```

#### 4.字符串的扩展

```js
 const str = 'abcd';

 console.log(str.includes('e'));//false
 console.log(str.startsWith('a'));//true
 console.log(str.endsWith('a'))//false
```

#### 5.箭头函数

##### 箭头函数与function对比

- 语法更加简洁、清晰

- 箭头函数不会创建自己的this（重要！！深入理解！！）

  箭头函数没有自己的`this`，它会捕获自己在**定义时**（注意，是定义时，不是调用时）所处的**外层执行环境的`this`**，并继承这个`this`值。所以，箭头函数中`this`的指向在它被定义的时候就已经确定了，之后永远不会改变。


- .call()/.apply()/.bind()无法改变箭头函数中this的指向

  .call()`/`.apply()`/`.bind()`方法可以用来动态修改函数执行时`this`的指向，但由于箭头函数的`this`定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数`this`的指向，虽然这么做代码不会报错。

- 箭头函数不能作为构造函数使用

  但是！！因为箭头函数没有自己的`this`，它的`this`其实是继承了外层执行环境中的`this`，且`this`指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用`new`调用时会报错！

- 箭头函数没有自己的arguments

- 箭头函数没有原型prototype

- 箭头函数不能用作Generator函数，不能使用yeild关键字

#### 6.Proxy和Reflect

代理一个对象的所有，包括读写操作和各种操作的监听

#### 7.Promise

解决异步编程中回调嵌套过深问题，会有一篇文章重点解释。

#### 8.class定义类

#### 9.Set，Map，Symbol

#### 10.for...of

#### 11.生成器和迭代器